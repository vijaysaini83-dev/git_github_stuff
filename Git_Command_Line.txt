Git Commands --

> cd <location or dirctory name>  				// To change the dirctory
> ls 								// List the dirctories
> ls -a							// List the hidden fil
> ls <location or dirctory name>				// List the contents or the location
> start .							// Opens up the current dirctory
> start <location or the dirctory name>			// Open the location in the folder explorer
> clear							// Clear terminal
> pwd								// Will print the working dirctory
> cd ..							// goes to one dirctory back
> cd <location or dirctory>					// goes to the location or in the dirctory given
> cd <initial of  dirctory + Tab>				// will complete the dirctory name for you
> touch <file name,....>					// will create the file for you in the current dirctory or at the given path
> mkdir <folder1 folder 2 ...>				// will create folder for you in terminal current dirctory or at the given path
> rm <location/file>						// will remove the file permanently (Be carefull)
> rm -rf <location/folder>					// will remove the folder permanently (Be carefull)





> git config user.name   					// To check if we have already configured user name
> git config --global user.name "Vijay Saini"	       // To setup the user name
> git config user.email					// To check if you have already configured email addres
> git config --global user.email vijay.saini83@gmail.com // To setup your email addres

> git status 							// will give you the stauts about your repository
> git init							// will create a git repository in the folder you are in that time(this is one time)

Note : .git folder contain all of the history. 

> git add <file or files with sapaces in between>       // will stage your files/folders(content)
> git add .                                             // will stage all the staged contents
> git rm --cached <file>...                             // will un-stage your file/folders(content)
> git commit --amend                                    // will allow you to redo or amend the vary last commit message
> git commit -m "<Your message>"                        // will commit with message.  -m is flag for message
> git restore <file>...                                 // will discard changes in working directory for that file or directory
> git log                                               // Will show the entire history with commit numbers and other information
> git log --oneline                                     // will show the one line of the commit and shot portion of commit number

> git config --global core.editor "code --wait"         // will setup the vs code as default editor for your commit message (by default is vim), --wait flag is to wait till you type your message.                               

Note : Added .gitingnore in the root of the project and mentioned the files which need not to be tracked.
       Go to gitignore.io to know what to include in your project gitignore file 

> git branch                                            // will give the all branchs in the repository, the working branch will have * before it
> git branch <branch name>                              // will create a new branch but do not check out in that
> git switch <branch name>                              // will switch you in the given branch
> git commit -a -m "<your message>"                     // will stage and commit with the message at the same time
> git commit -am "<your message>"                       // -a and -m flags can be used combined

> git switch -c "<branch name>"                         // will create and switch to that branch, flag -c is for create
> git checkout -b "<branch name>"                       // will create and switch to that branch, flag -b is for branch

Note : If you change a file and try to switch your branch without commiting that change and your change is in conflict then you will get 
       warning and your switching will be Aborted. 
       If you have a new file created or a change which is not in conflict with any other branch then and you try to switch the branch without
       commiting your changes then the new file or change will go with you and you will be able to switch the branch. Now you can commit that file 
       in the branch you swiched in or in the branch you came from. The new change or file will be part of that branch where you commit that only.

> git branch -d <branch name>                           // will delete the given branch
Note : You can not delete the branch if you are in that branch at that time.

> git branch -D <branch name>                           // will forcefuly delete the branch irrespective of its satatus (fully merge or not)
                                                        // you can use -d -f as well in place of -D

Note : Mostly when flags are used in Caps, it carries the --forced , -f flag

> git branch -m <New name from the current branch>      // will rename your branch. You need to be in that branch to rename and -m stands for move


Note : Now we are talking about merge. If you want to merge feature brach in the main branch then in order to do that you need to checkout the
       main brach first then you have to issue the command to merge feature branch into mail.
> git switch main                                       // swiched to main
> git merge <feature branch name>                       // This will merge the feature branch into main, it is also call fast-forward merge.



> git mv <old_filename> <new_filename>                  // will rename the file with the given new name. if space is in the file name
                                                        // then pls put the file names in double quots

> git diff                                              // will show the changes made in the files which are not staged yet.
> git diff head                                         // will show the changes in the files since the last commit
> git diff --staged                                     // Will show the changes which are staged.
> git diff --cached                                     // will show the changes which are staged

> git diff head <filename ... ...>                      // will only show the changes since last commit for the given file
> git diff --staged <filename ...>                      // will only show the changes which are staged for the given file
> git diff --cached <filename ...>                      // will only show the changes which are staged for the given file
> git diff <file ...>                                   // will only show the changes which are not staged
> git diff [branch1]..[branch2]                         // will show the diff between the given two brachs, 
                                                        // you can use .. or sapce in bwtween the filenames
> git diff [CommitNum1]..[CommitNum1]                   // will show the diff between the given two commitnumbers, 
                                                        // you can use .. or sapce in bwtween the commitnumbers
Note : Stashing
If you are in a branch and make some changes which are untracked and then try to change your brach, the untracked changes to with 
to the target branch however they will be showing as untracked changes in the target branch. If you commit those changes in any
of the branch then it will be part of that branch only.

> git stash or git stash save                           // will take your un-staged and staged change off and put them in the stashing 
                                                        // area and allow you to switch the branch. You can do all other stuff there.

> git stash pop                                         // Will re-apply your stashed changes to your branch.